x = 2; % x değerini belirle
n = 10; % serinin kaç terimine kadar hesaplanacağını belirle

sum = 1; % ilk terim 1 olduğu için sum değişkenine 1 atayalım
fact = 1; % faktöriyel hesabı için 1'e eşitleyelim

for i = 1:n
    fact = fact * i; % faktöriyeli hesapla
    term = x^i / fact; % terimi hesapla
    sum = sum + term; % toplam değişkenini güncelle
end

disp(sum) % toplamı ekrana yazdır


***

e^x = 1 + x/1! + x^2/2! + x^3/3! + ...

function testTaylor()

    % Taylor serisi ile hesaplanacak fonksiyonun seçimi
    f = @sin; % örnek olarak sin(x) fonksiyonunu seçtik
    x = pi/4; % örnek olarak x = pi/4 seçtik
    
    % Taylor serisi ile hesaplama
    n = 10; % serinin kaç terimine kadar hesaplanacağını belirleyelim
    taylor_sum = 0;
    for i = 0:n
        taylor_sum = taylor_sum + ( (-1)^i * x^(2*i+1) ) / factorial(2*i+1);
    end
    
    % Gerçek fonksiyonun hesaplanması
    real_value = f(x);
    
    % Sonuçların karşılaştırılması
    tolerance = 1e-5; % kabul edilebilir hata payı
    if abs(taylor_sum - real_value) < tolerance
        fprintf('Test başarılı: Taylor serisi ile %s(%.3f)=%.6f hesaplandı.\n', func2str(f), x, taylor_sum);
    else
        fprintf('Test başarısız: Taylor serisi ile %s(%.3f)=%.6f hesaplandı, gerçek değer %.6f.\n', func2str(f), x, taylor_sum, real_value);
    end
end
***
function testExp()

    % Taylor serisi ile hesaplama için x değeri seçimi
    x = 1.5; % örnek olarak x = 1.5 seçtik
    
    % Gerçek değer hesaplama
    real_value = exp(x);
    
    % Taylor serisi ile hesaplama
    n = 10; % serinin kaç terimine kadar hesaplanacağını belirleyelim
    taylor_sum = 0;
    for i = 0:n
        taylor_sum = taylor_sum + (x^i) / factorial(i);
    end
    
    % Sonuçların karşılaştırılması
    tolerance = 1e-5; % kabul edilebilir hata payı
    if abs(taylor_sum - real_value) < tolerance
        fprintf('Test başarılı: Taylor serisi ile exp(%.3f)=%.6f hesaplandı.\n', x, taylor_sum);
    else
        fprintf('Test başarısız: Taylor serisi ile exp(%.3f)=%.6f hesaplandı, gerçek değer %.6f.\n', x, taylor_sum, real_value);
    end
end
***

Öncelikle, Taylor serisini 2 boyutlu bir grafikte göstermek için, belirli bir x aralığı için Taylor serisi ile gerçek fonksiyonun farkını gösteren bir grafik çizebiliriz. İşte örnek bir kod:

function plotExpTaylor2D()
    % Taylor serisi ile hesaplama için x değerleri
    x = linspace(-5, 5, 200); % -5 ile 5 arasında 200 eşit parçaya bölünmüş x değerleri
    
    % Gerçek fonksiyonun hesaplanması
    y_exp = exp(x);
    
    % Taylor serisi ile hesaplanan fonksiyonun hesaplanması
    y_taylor = zeros(size(x)); % boş bir dizi oluşturulur
    n = 10; % serinin kaç terimine kadar hesaplanacağını belirleyelim
    for i = 0:n
        y_taylor = y_taylor + (x.^i) / factorial(i);
    end
    
    % Grafik çizdirme
    plot(x, y_exp, 'r', 'LineWidth', 2); hold on;
    plot(x, y_taylor, 'b--', 'LineWidth', 2); hold off;
    xlabel('x');
    ylabel('y');
    title('exp(x) ve Taylor Serisi');
    legend('exp(x)', 'Taylor Serisi');
end
Bu fonksiyon, -5 ile 5 arasında 200 eşit parçaya bölünmüş x değerleri için gerçek fonksiyonu ve Taylor serisini hesaplar, ve bunları aynı grafikte gösterir. Grafikte kırmızı renkli çizgi gerçek fonksiyonu, mavi renkli çizgi ise Taylor serisini gösterir.

****
Şimdi, aynı şeyi 3 boyutlu bir grafikte yapmak için, belirli bir x, y aralığı için Taylor serisi ile gerçek fonksiyonun farkını gösteren bir yüzey grafiği çizebiliriz. İşte örnek bir kod:



function plotExpTaylor3D()
    % Taylor serisi ile hesaplama için x, y değerleri
    [X, Y] = meshgrid(linspace(-5, 5, 100)); % -5 ile 5 arasında 100x100 grid
    
    % Gerçek fonksiyonun hesaplanması
    Z_exp = exp(X);
    
    % Taylor serisi ile hesaplanan fonksiyonun hesaplanması
    Z_taylor = zeros(size(X)); % boş bir dizi oluşturulur
    n = 10; % serinin kaç terimine kadar hesaplanacağını belirleyelim
    for i = 0:n
        Z_taylor = Z_taylor + (X.^i) / factorial(i);
end
% Grafik çizdirme
surf(X, Y, Z_exp, 'FaceAlpha', 0.5, 'EdgeColor', 'none'); hold on;
surf(X, Y, Z_taylor, 'FaceAlpha', 0.5, 'EdgeColor', 'none'); hold off;
xlabel('x');
ylabel('y');
zlabel('z');
title('exp(x) ve Taylor Serisi');
legend('exp(x)', 'Taylor Serisi');
end


Bu fonksiyon, -5 ile 5 arasında 100x100 grid için gerçek fonksiyonu ve Taylor serisini hesaplar, ve bunları aynı 3 boyutlu grafikte gösterir. Grafikte yarı şeffaf yüzey gerçek fonksiyonu, katı yüzey ise Taylor serisini gösterir.


***
function taylorExp()
    x = 1; % x değerini belirleyelim
    y = 1; % ilk terimi belirleyelim
    
    fprintf('n = %d, y = %f\n', 0, y); % ilk terim
    
    for n = 2:2:10 % 2'şer aralıklarla terim sayısını arttıralım
        y = y + (x^(n-1)) / factorial(n-1);
        fprintf('n = %d, y = %f\n', n, y); % terim sayısı ve hesaplanan y değeri
    end
end
Bu kod, x = 1 değeri için terim sayısı 0'dan 10'a kadar ikişer aralıkla hesaplanan Taylor serisi terimlerini hesaplar ve her bir terim için terim sayısı ve hesaplanan y değerini ekrana yazdırır.

****

function testTaylorExp()
    x = linspace(-5, 5, 100); % x değerlerini oluşturalım
    y_exp = exp(x); % gerçek fonksiyonu hesaplayalım
    
    % Taylor serisi terimlerini hesaplayalım
    y_taylor = zeros(size(x));
    for n = 0:2:10 % 2'şer aralıklarla terim sayısını arttıralım
        y_taylor = y_taylor + (x.^n) / factorial(n);
    end
    
    % Grafik çizdirelim
    plot(x, y_exp, 'b-', x, y_taylor, 'r--');
    xlabel('x');
    ylabel('f(x)');
    title('exp(x) ve Taylor Serisi');
    legend('exp(x)', 'Taylor Serisi');
end
Bu test fonksiyonu, -5 ile 5 arasında 100 adet x değeri için gerçek fonksiyonu ve hesaplanan Taylor serisini hesaplar, ve bunları aynı grafikte gösterir. Gerçek fonksiyon mavi renkte, hesaplanan Taylor serisi ise kırmızı kesikli çizgi ile gösterilir.


***
Bu fonksiyon, gerçek fonksiyonu ve her terim sayısı için hesaplanan Taylor serisini aynı grafikte gösterir. Gerçek fonksiyon siyah çizgi ile gösterilirken, her terim sayısı için farklı bir renk kullanılarak hesaplanan Taylor serisi kıvrımlı çizgilerle gösterilir. 



function plotTaylorExp()
    x = linspace(-5, 5, 100); % x değerlerini oluşturalım
    y_exp = exp(x); % gerçek fonksiyonu hesaplayalım
    
    n_values = 0:2:20; % terim sayılarını belirleyelim
    colors = ['r', 'g', 'b', 'm', 'c', 'k', 'y', 'r', 'g', 'b', 'm']; % her terim sayısı için farklı bir renk kullanalım
    
    % Taylor serisi terimlerini hesaplayalım
    y_taylor = zeros(length(n_values), length(x));
    for i = 1:length(n_values)
        n = n_values(i);
        y_taylor(i,:) = (x.^n) / factorial(n);
    end
    
    % Grafik çizdirelim
    figure;
    plot(x, y_exp, 'k-', 'LineWidth', 2);
    hold on;
    for i = 1:length(n_values)
        plot(x, y_taylor(i,:), colors(i), 'LineWidth', 1);
    end
    xlabel('x');
    ylabel('f(x)');
    title('exp(x) ve Taylor Serisi');
    legend(['exp(x)', arrayfun(@(n) sprintf('Taylor Serisi (n = %d)', n), n_values, 'UniformOutput', false)]);
    hold off;
end



